// Script de test de persistance des donn√©es en production
console.log('üîç Test de persistance des donn√©es en production...');

// Fonction pour faire des requ√™tes
async function makeRequest(url, options = {}) {
  try {
    const response = await fetch(url, {
      method: 'GET',
      headers: {
        'Content-Type': 'application/json',
        ...options.headers
      },
      ...options
    });
    
    const data = await response.json();
    return {
      success: response.ok,
      status: response.status,
      data: data
    };
  } catch (error) {
    return {
      success: false,
      error: error.message
    };
  }
}

// Test complet de persistance
async function testDataPersistence() {
  console.log('üöÄ D√©marrage du test de persistance...');
  
  const results = {
    timestamp: new Date().toISOString(),
    environment: null,
    auth: null,
    patients: null,
    creation: null,
    verification: null
  };
  
  try {
    // 1. D√©tecter l'environnement
    console.log('1Ô∏è‚É£ D√©tection de l\'environnement...');
    const isProduction = window.location.hostname.includes('pages.dev') || 
                        window.location.hostname.includes('cloudflare') ||
                        window.location.hostname.includes('onrender.com') ||
                        import.meta.env.PROD;
    
    const baseURL = import.meta.env.VITE_API_URL || 
      (isProduction ? 'https://polycliniquedesapotres-backend.onrender.com' : 'http://localhost:5000');
    
    results.environment = {
      isProduction,
      hostname: window.location.hostname,
      baseURL,
      mode: import.meta.env.MODE
    };
    
    console.log('üåç Environnement:', results.environment);
    
    // 2. V√©rifier l'authentification
    console.log('2Ô∏è‚É£ V√©rification de l\'authentification...');
    const token = localStorage.getItem('token');
    
    if (!token) {
      console.log('‚ùå Aucun token trouv√©');
      results.auth = { success: false, error: 'Aucun token' };
    } else {
      console.log('‚úÖ Token trouv√©:', token.substring(0, 20) + '...');
      results.auth = { success: true, tokenLength: token.length };
    }
    
    // 3. R√©cup√©rer les patients existants
    console.log('3Ô∏è‚É£ R√©cup√©ration des patients existants...');
    const patientsResponse = await makeRequest(`${baseURL}/api/patients`, {
      headers: {
        'Authorization': `Bearer ${token}`
      }
    });
    
    if (patientsResponse.success) {
      const initialCount = patientsResponse.data.patients?.length || 0;
      console.log(`üìä Patients existants: ${initialCount}`);
      results.patients = { success: true, count: initialCount };
    } else {
      console.log('‚ùå Erreur r√©cup√©ration patients:', patientsResponse.error);
      results.patients = { success: false, error: patientsResponse.error };
    }
    
    // 4. Cr√©er un nouveau patient
    console.log('4Ô∏è‚É£ Cr√©ation d\'un nouveau patient...');
    const testPatient = {
      firstName: 'Test',
      lastName: 'Production',
      sexe: 'M',
      dateNaissance: '1990-01-01',
      poids: 70,
      adresse: 'Adresse test production',
      telephone: '123456789'
    };
    
    console.log('üìã Donn√©es du patient:', testPatient);
    
    const createResponse = await makeRequest(`${baseURL}/api/patients`, {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${token}`
      },
      body: JSON.stringify(testPatient)
    });
    
    if (createResponse.success) {
      console.log('‚úÖ Patient cr√©√© via API:', createResponse.data);
      results.creation = { success: true, data: createResponse.data };
    } else {
      console.log('‚ùå Erreur cr√©ation patient:', createResponse.error);
      results.creation = { success: false, error: createResponse.error };
    }
    
    // 5. V√©rifier la persistance
    console.log('5Ô∏è‚É£ V√©rification de la persistance...');
    
    if (results.creation.success) {
      // Attendre un peu pour la synchronisation
      console.log('‚è≥ Attente de la synchronisation...');
      await new Promise(resolve => setTimeout(resolve, 3000));
      
      const verifyResponse = await makeRequest(`${baseURL}/api/patients`, {
        headers: {
          'Authorization': `Bearer ${token}`
        }
      });
      
      if (verifyResponse.success) {
        const finalCount = verifyResponse.data.patients?.length || 0;
        console.log(`üìä Nouveau nombre de patients: ${finalCount}`);
        
        // Chercher le patient cr√©√©
        const createdPatient = verifyResponse.data.patients.find(p => 
          p.firstName === 'Test' && p.lastName === 'Production'
        );
        
        if (createdPatient) {
          console.log('‚úÖ Patient trouv√© dans la base:', createdPatient);
          results.verification = { 
            success: true, 
            found: true, 
            patient: createdPatient,
            count: finalCount
          };
        } else {
          console.log('‚ùå Patient non trouv√© dans la base');
          results.verification = { 
            success: true, 
            found: false,
            count: finalCount
          };
        }
      } else {
        console.log('‚ùå Erreur v√©rification:', verifyResponse.error);
        results.verification = { success: false, error: verifyResponse.error };
      }
    }
    
    // 6. Analyse des r√©sultats
    console.log('\nüìä R√âSULTATS COMPLETS:', results);
    
    console.log('\nüìà ANALYSE:');
    
    if (!results.environment.isProduction) {
      console.log('‚ö†Ô∏è Attention: Test ex√©cut√© en local, pas en production');
    } else {
      console.log('‚úÖ Test ex√©cut√© en production');
    }
    
    if (results.auth.success) {
      console.log('‚úÖ Authentification: OK');
    } else {
      console.log('‚ùå Authentification: √âCHEC');
    }
    
    if (results.patients.success) {
      console.log(`‚úÖ R√©cup√©ration patients: OK (${results.patients.count} patients)`);
    } else {
      console.log('‚ùå R√©cup√©ration patients: √âCHEC');
    }
    
    if (results.creation.success) {
      console.log('‚úÖ Cr√©ation patient: OK');
    } else {
      console.log('‚ùå Cr√©ation patient: √âCHEC');
    }
    
    if (results.verification) {
      if (results.verification.success && results.verification.found) {
        console.log('‚úÖ PERSISTANCE: OK - Donn√©es sauvegard√©es');
      } else if (results.verification.success && !results.verification.found) {
        console.log('‚ùå PERSISTANCE: √âCHEC - Donn√©es non sauvegard√©es');
        console.log('üîç DIAGNOSTIC: Le patient est cr√©√© mais non persist√© en base');
      } else {
        console.log('‚ùå PERSISTANCE: Impossible de v√©rifier');
      }
    }
    
    // 7. Recommandations
    console.log('\nüí° RECOMMANDATIONS:');
    
    if (results.creation.success && results.verification && !results.verification.found) {
      console.log('üö® PROBL√àME DE PERSISTANCE D√âTECT√â');
      console.log('   ‚Üí V√©rifiez les logs du backend sur Render');
      console.log('   ‚Üí V√©rifiez la configuration de la base de donn√©es');
      console.log('   ‚Üí V√©rifiez que les migrations Prisma sont appliqu√©es');
      console.log('   ‚Üí V√©rifiez que le backend a acc√®s √† la base de donn√©es');
    } else if (results.creation.success && results.verification && results.verification.found) {
      console.log('‚úÖ PERSISTANCE FONCTIONNE CORRECTEMENT');
    } else if (!results.creation.success) {
      console.log('üîß PROBL√àME D\'AUTHENTIFICATION OU D\'API');
      console.log('   ‚Üí V√©rifiez la configuration de l\'API');
      console.log('   ‚Üí V√©rifiez l\'authentification');
      console.log('   ‚Üí V√©rifiez que le backend est accessible');
    }
    
    return results;
    
  } catch (error) {
    console.error('üí• Erreur fatale:', error);
    return { error: error.message };
  }
}

// Exporter la fonction
window.testDataPersistence = testDataPersistence;

// Ex√©cuter automatiquement le test
if (document.readyState === 'loading') {
  document.addEventListener('DOMContentLoaded', testDataPersistence);
} else {
  testDataPersistence();
}

console.log('üîç Script de test de persistance charg√©. Utilisez testDataPersistence() pour relancer.');
