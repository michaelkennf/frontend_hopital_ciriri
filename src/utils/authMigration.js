// Script de migration pour corriger les probl√®mes d'authentification
console.log('üîÑ D√©marrage de la migration d\'authentification...');

// 1. Nettoyer les anciens tokens
const cleanOldTokens = () => {
  console.log('üßπ Nettoyage des anciens tokens...');
  
  const keysToRemove = ['auth-token', 'user-token', 'jwt-token'];
  let cleaned = 0;
  
  keysToRemove.forEach(key => {
    if (localStorage.getItem(key)) {
      localStorage.removeItem(key);
      console.log(`‚úÖ Supprim√©: ${key}`);
      cleaned++;
    }
  });
  
  console.log(`üßπ Nettoyage termin√©: ${cleaned} tokens supprim√©s`);
  return cleaned > 0;
};

// 2. V√©rifier la configuration de l'API
const checkApiConfig = () => {
  console.log('‚öôÔ∏è V√©rification de la configuration API...');
  
  const config = {
    environment: import.meta.env.MODE,
    viteApiUrl: import.meta.env.VITE_API_URL,
    prod: import.meta.env.PROD,
    dev: import.meta.env.DEV,
    baseUrl: window.location.origin
  };
  
  console.log('üìä Configuration actuelle:', config);
  
  const expectedUrl = config.prod 
    ? 'https://polycliniquedesapotres-backend.onrender.com'
    : 'http://localhost:5000';
  
  const actualUrl = config.viteApiUrl || expectedUrl;
  
  console.log('üåê URL attendue:', expectedUrl);
  console.log('üåê URL actuelle:', actualUrl);
  
  return {
    correct: actualUrl === expectedUrl,
    expected: expectedUrl,
    actual: actualUrl,
    config
  };
};

// 3. Tester la connectivit√©
const testConnectivity = async () => {
  try {
    console.log('üîó Test de connectivit√©...');
    
    const config = checkApiConfig();
    const token = localStorage.getItem('token');
    
    const response = await fetch(`${config.actual}/api/health`, {
      method: 'GET',
      headers: {
        'Content-Type': 'application/json',
        ...(token && { 'Authorization': `Bearer ${token}` })
      }
    });
    
    if (response.ok) {
      const data = await response.json();
      console.log('‚úÖ Backend accessible:', data);
      return { success: true, data };
    } else {
      console.log('‚ùå Backend inaccessible:', response.status, response.statusText);
      return { success: false, status: response.status, statusText: response.statusText };
    }
  } catch (error) {
    console.error('‚ùå Erreur de connectivit√©:', error);
    return { success: false, error: error.message };
  }
};

// 4. Tester l'authentification
const testAuth = async () => {
  try {
    console.log('üîê Test d\'authentification...');
    
    const config = checkApiConfig();
    const token = localStorage.getItem('token');
    
    if (!token) {
      console.log('‚ùå Aucun token trouv√©');
      return { success: false, error: 'Aucun token trouv√©' };
    }
    
    const response = await fetch(`${config.actual}/api/auth/me`, {
      method: 'GET',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${token}`
      }
    });
    
    if (response.ok) {
      const data = await response.json();
      console.log('‚úÖ Authentification r√©ussie:', data);
      return { success: true, user: data };
    } else {
      const errorData = await response.text();
      console.log('‚ùå Authentification √©chou√©e:', response.status, errorData);
      return { 
        success: false, 
        status: response.status, 
        error: errorData 
      };
    }
  } catch (error) {
    console.error('‚ùå Erreur d\'authentification:', error);
    return { success: false, error: error.message };
  }
};

// 5. Tester les patients
const testPatients = async () => {
  try {
    console.log('üë• Test des patients...');
    
    const config = checkApiConfig();
    const token = localStorage.getItem('token');
    
    const response = await fetch(`${config.actual}/api/patients`, {
      method: 'GET',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${token}`
      }
    });
    
    if (response.ok) {
      const data = await response.json();
      console.log('‚úÖ Patients accessibles:', data.patients?.length || 0, 'patients trouv√©s');
      return { success: true, count: data.patients?.length || 0 };
    } else {
      const errorData = await response.text();
      console.log('‚ùå Patients inaccessibles:', response.status, errorData);
      return { 
        success: false, 
        status: response.status, 
        error: errorData 
      };
    }
  } catch (error) {
    console.error('‚ùå Erreur lors du test des patients:', error);
    return { success: false, error: error.message };
  }
};

// 6. Fonction principale de migration
const runAuthMigration = async () => {
  console.log('üöÄ D√©marrage de la migration d\'authentification...');
  
  const results = {
    timestamp: new Date().toISOString(),
    cleaned: false,
    apiConfig: null,
    connectivity: null,
    auth: null,
    patients: null
  };
  
  // 1. Nettoyer les anciens tokens
  results.cleaned = cleanOldTokens();
  
  // 2. V√©rifier la configuration
  results.apiConfig = checkApiConfig();
  
  // 3. Tester la connectivit√©
  results.connectivity = await testConnectivity();
  
  // 4. Tester l'authentification
  results.auth = await testAuth();
  
  // 5. Tester les patients
  results.patients = await testPatients();
  
  console.log('üìä R√©sultats de la migration:', results);
  
  // Recommandations
  console.log('üí° Recommandations:');
  
  if (!results.cleaned) {
    console.log('- ‚úÖ Aucun ancien token √† nettoyer');
  } else {
    console.log('- ‚úÖ Anciens tokens nettoy√©s');
  }
  
  if (!results.apiConfig.correct) {
    console.log('- ‚ö†Ô∏è Configuration API incorrecte');
    console.log(`  Attendu: ${results.apiConfig.expected}`);
    console.log(`  Actuel: ${results.apiConfig.actual}`);
  } else {
    console.log('- ‚úÖ Configuration API correcte');
  }
  
  if (!results.connectivity.success) {
    console.log('- ‚ùå Backend inaccessible');
    console.log(`  Erreur: ${results.connectivity.error || results.connectivity.statusText}`);
  } else {
    console.log('- ‚úÖ Backend accessible');
  }
  
  if (!results.auth.success) {
    console.log('- ‚ùå Authentification √©chou√©e');
    console.log(`  Erreur: ${results.auth.error}`);
    console.log('- üîë Solution: Reconnectez-vous');
  } else {
    console.log('- ‚úÖ Authentification r√©ussie');
  }
  
  if (!results.patients.success) {
    console.log('- ‚ùå Patients inaccessibles');
    console.log(`  Erreur: ${results.patients.error}`);
  } else {
    console.log(`- ‚úÖ Patients accessibles (${results.patients.count} trouv√©s)`);
  }
  
  // R√©sum√© final
  const allGood = results.apiConfig.correct && 
                  results.connectivity.success && 
                  results.auth.success && 
                  results.patients.success;
  
  if (allGood) {
    console.log('üéâ Migration r√©ussie ! Tout devrait fonctionner maintenant.');
  } else {
    console.log('‚ö†Ô∏è Migration partiellement r√©ussie. V√©rifiez les recommandations ci-dessus.');
  }
  
  return results;
};

// Exporter les fonctions
window.AuthMigration = {
  cleanOldTokens,
  checkApiConfig,
  testConnectivity,
  testAuth,
  testPatients,
  runAuthMigration
};

// Ex√©cuter automatiquement la migration
if (document.readyState === 'loading') {
  document.addEventListener('DOMContentLoaded', runAuthMigration);
} else {
  runAuthMigration();
}

console.log('üîÑ Script de migration d\'authentification charg√©. Utilisez AuthMigration.runAuthMigration() pour relancer.');
