// Diagnostic sp√©cifique pour les probl√®mes de persistance en production
console.log('üîç Diagnostic de persistance des donn√©es en production...');

// 1. V√©rifier l'environnement
const checkEnvironment = () => {
  const env = {
    mode: import.meta.env.MODE,
    prod: import.meta.env.PROD,
    dev: import.meta.env.DEV,
    viteApiUrl: import.meta.env.VITE_API_URL,
    hostname: window.location.hostname,
    timestamp: new Date().toISOString()
  };
  
  console.log('üåç Environnement:', env);
  
  const isProduction = env.prod || 
    env.hostname.includes('pages.dev') || 
    env.hostname.includes('cloudflare') ||
    env.hostname.includes('onrender.com');
  
  return { env, isProduction };
};

// 2. Tester la cr√©ation d'un patient
const testPatientCreation = async () => {
  try {
    const { env, isProduction } = checkEnvironment();
    const baseURL = env.viteApiUrl || 
      (isProduction ? 'https://polycliniquedesapotres-backend.onrender.com' : 'http://localhost:5000');
    
    const token = localStorage.getItem('token');
    
    console.log('üë• Test de cr√©ation d\'un patient...');
    console.log('  URL:', baseURL);
    console.log('  Token pr√©sent:', !!token);
    
    const testPatient = {
      firstName: 'Test',
      lastName: 'Production',
      sexe: 'M',
      dateNaissance: '1990-01-01',
      poids: 70,
      adresse: 'Adresse test production',
      telephone: '123456789'
    };
    
    console.log('  Donn√©es √† envoyer:', testPatient);
    
    const response = await fetch(`${baseURL}/api/patients`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${token}`
      },
      body: JSON.stringify(testPatient)
    });
    
    console.log('  Statut de la r√©ponse:', response.status);
    console.log('  Headers de la r√©ponse:', Object.fromEntries(response.headers.entries()));
    
    if (response.ok) {
      const data = await response.json();
      console.log('‚úÖ Patient cr√©√© avec succ√®s:', data);
      return { success: true, data };
    } else {
      const errorText = await response.text();
      console.log('‚ùå Erreur lors de la cr√©ation:', response.status, errorText);
      return { success: false, status: response.status, error: errorText };
    }
  } catch (error) {
    console.error('‚ùå Erreur lors du test:', error);
    return { success: false, error: error.message };
  }
};

// 3. V√©rifier que le patient a √©t√© sauvegard√©
const verifyPatientSaved = async () => {
  try {
    const { env, isProduction } = checkEnvironment();
    const baseURL = env.viteApiUrl || 
      (isProduction ? 'https://polycliniquedesapotres-backend.onrender.com' : 'http://localhost:5000');
    
    const token = localStorage.getItem('token');
    
    console.log('üîç V√©rification de la sauvegarde...');
    
    const response = await fetch(`${baseURL}/api/patients`, {
      headers: {
        'Authorization': `Bearer ${token}`,
        'Content-Type': 'application/json'
      }
    });
    
    if (response.ok) {
      const data = await response.json();
      const patients = data.patients || [];
      
      console.log(`üìä Nombre de patients r√©cup√©r√©s: ${patients.length}`);
      
      // Chercher le patient de test
      const testPatient = patients.find(p => 
        p.firstName === 'Test' && p.lastName === 'Production'
      );
      
      if (testPatient) {
        console.log('‚úÖ Patient de test trouv√© dans la base:', testPatient);
        return { success: true, found: true, patient: testPatient };
      } else {
        console.log('‚ùå Patient de test non trouv√© dans la base');
        return { success: true, found: false };
      }
    } else {
      const errorText = await response.text();
      console.log('‚ùå Erreur lors de la v√©rification:', response.status, errorText);
      return { success: false, error: errorText };
    }
  } catch (error) {
    console.error('‚ùå Erreur lors de la v√©rification:', error);
    return { success: false, error: error.message };
  }
};

// 4. Test complet de persistance
const testDataPersistence = async () => {
  console.log('üöÄ D√©marrage du test de persistance...');
  
  const results = {
    timestamp: new Date().toISOString(),
    environment: null,
    creation: null,
    verification: null
  };
  
  // 1. V√©rifier l'environnement
  results.environment = checkEnvironment();
  
  // 2. Cr√©er un patient
  results.creation = await testPatientCreation();
  
  // 3. V√©rifier la sauvegarde
  if (results.creation.success) {
    // Attendre un peu pour la synchronisation
    await new Promise(resolve => setTimeout(resolve, 2000));
    results.verification = await verifyPatientSaved();
  }
  
  console.log('üìä R√©sultats complets:', results);
  
  // Analyse des r√©sultats
  console.log('üìà Analyse des r√©sultats:');
  
  if (!results.environment.isProduction) {
    console.log('‚ö†Ô∏è Attention: Test ex√©cut√© en local, pas en production');
  } else {
    console.log('‚úÖ Test ex√©cut√© en production');
  }
  
  if (results.creation.success) {
    console.log('‚úÖ Cr√©ation de patient r√©ussie');
  } else {
    console.log('‚ùå Cr√©ation de patient √©chou√©e');
    console.log('  Erreur:', results.creation.error);
  }
  
  if (results.verification) {
    if (results.verification.success && results.verification.found) {
      console.log('‚úÖ Persistance des donn√©es confirm√©e');
    } else if (results.verification.success && !results.verification.found) {
      console.log('‚ùå PROBL√àME: Patient cr√©√© mais non sauvegard√© en base');
      console.log('  ‚Üí Probl√®me de persistance des donn√©es');
    } else {
      console.log('‚ùå Impossible de v√©rifier la persistance');
      console.log('  Erreur:', results.verification.error);
    }
  }
  
  // Recommandations
  console.log('üí° Recommandations:');
  
  if (results.creation.success && results.verification && !results.verification.found) {
    console.log('- V√©rifiez les logs du backend sur Render');
    console.log('- V√©rifiez la configuration de la base de donn√©es');
    console.log('- V√©rifiez que les migrations Prisma sont appliqu√©es');
    console.log('- V√©rifiez que le backend a acc√®s √† la base de donn√©es');
  } else if (!results.creation.success) {
    console.log('- V√©rifiez la configuration de l\'API');
    console.log('- V√©rifiez l\'authentification');
    console.log('- V√©rifiez que le backend est accessible');
  }
  
  return results;
};

// Exporter les fonctions
window.ProductionDataDiagnostic = {
  checkEnvironment,
  testPatientCreation,
  verifyPatientSaved,
  testDataPersistence
};

// Ex√©cuter automatiquement le test
if (document.readyState === 'loading') {
  document.addEventListener('DOMContentLoaded', testDataPersistence);
} else {
  testDataPersistence();
}

console.log('üîç Script de diagnostic de persistance charg√©. Utilisez ProductionDataDiagnostic.testDataPersistence() pour relancer.');
